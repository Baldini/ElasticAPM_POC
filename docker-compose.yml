version: '3.4'

services:
  api1:
    image: ${DOCKER_REGISTRY-}api1
    build:
      context: .
      dockerfile: API1/Dockerfile
    depends_on:
       - apm-server
       - elasticsearch
       - sql
       - kibana
       - api2

  api2:
    image: ${DOCKER_REGISTRY-}api2
    build:
      context: .
      dockerfile: API2/Dockerfile
    depends_on:
       - apm-server
       - elasticsearch
       - raven
       - kibana

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.6.2
    depends_on:
      - elasticsearch
      - kibana
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
  sql:
    image: microsoft/mssql-server-linux:2017-latest
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Fk*(%cS7G+DB?:bK
    ports:
      - "1433:1433"
  raven:
    image: ravendb/ravendb
    ports:
     - 38888:38888
     - 8080:8080
    environment:
      - RAVEN_Setup_Mode=None 
      - RAVEN_License_Eula_Accepted=true 
      - RAVEN_Security_UnsecuredAccessAllowed=PrivateNetwork

volumes:
  esdata:
    driver: local